generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Image {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?

  relateObject   RelateObject? @relation(fields: [relateObjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  relateObjectId String?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  displayName String
  password    Password?

  roles    Role[]
  sessions Session[]
  objects  Object[]
}

model Role {
  id          String       @id @default(cuid())
  title       String       @unique
  users       User[]
  permissions Permission[]
}

model Permission {
  id          String  @id @default(cuid())
  action      String
  entity      String
  access      String
  description String?

  roles Role[]

  @@unique([action, entity, access])
}

model Object {
  id     String @id @default(cuid())
  stem   String @unique
  nature String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  relation RelateObject?
}

model RelateObject {
  id      String   @id @default(cuid())
  body    Bytes?
  level   String?
  count   Int?
  access  Boolean?
  locale  String?
  timeSet TimeSet?
  images  Image[]

  object   Object @relation(fields: [objectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  objectId String @unique
}

model TimeSet {
  id       String        @id @default(cuid())
  time     DateTime
  zone     String
  relate   RelateObject? @relation(fields: [relateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  relateId String?       @unique
}

model Session {
  id             String    @id @default(cuid())
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId])
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int

  @@unique([target, type])
}

model Project {
  id         String  @id @default(cuid())
  title      String  @unique
  alt        String  @unique
  repository String?

  images Image[]
}
